import type { Metadata } from "next";
import "bootstrap/dist/css/bootstrap.css";
import '@/App.css'
import { getData, getEndpointData } from "@/lib/api";
import { getIdFromURL, getNameByLanguage } from "@/lib/util";
import i18nConfig, { type Locale } from "@/i18nConfig";
import TranslationsProvider from "@/components/translation-provider";
import { initTranslationsServer } from "@/lib/i18n";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v14-appRouter";
import TransitionProvider from "@/components/transition-provider";
import AOSInitializer from "@/components/aos-initializer";
import Loader from "@/components/loader";
import { dir } from 'i18next';
import { i18nNamespaces } from '@/i18nConfig';
import { Zen_Maru_Gothic } from 'next/font/google';
import {
	CachedAllPokemonNamesAndIds,
	CachedPokemonSpecies,
} from "@/lib/definitions";
import NavBar from "@/components/navbar";

const zen_maru_gothic = Zen_Maru_Gothic({ weight: '400', subsets: ['latin'] });

export const metadata: Metadata = {
	title: "Pokedex",
	description: "Pokedex App Generated by create next app",
};

export async function generateStaticParams() {
	return i18nConfig.locales.map(locale => ({ locale }));
}

type RootLayoutProps = {
	children: React.ReactNode;
	params: {
		locale: Locale;
	};
};
export default async function Layout({
	children,
	params: { locale },
}: RootLayoutProps) {
	const { resources } = await initTranslationsServer(locale, i18nNamespaces);

	const generationResponse = await getEndpointData("generation");
	const generations = await getData(
		"generation",
		generationResponse.results.map((entry) => entry.name),
		"name"
	);

	// types
	const typeResponse = await getEndpointData("type");
	const types = await getData(
		"type",
		typeResponse.results.map((entry) => entry.name),
		"name"
	);

	let speciesData: CachedPokemonSpecies,
		pokemonsNamesAndId: CachedAllPokemonNamesAndIds;
	const speciesResponse = await getEndpointData("pokemonSpecies");

	if (locale !== "en") {
		speciesData = await getData(
			"pokemonSpecies",
			speciesResponse.results.map((entry) => getIdFromURL(entry.url)),
			"id"
		);
		pokemonsNamesAndId = Object.values(
			speciesData
		).reduce<CachedAllPokemonNamesAndIds>((pre, cur) => {
			pre[getNameByLanguage(cur.name, locale, cur)] = cur.id;
			return pre;
		}, {});
	} else {
		pokemonsNamesAndId =
			speciesResponse.results.reduce<CachedAllPokemonNamesAndIds>(
				(pre, cur) => {
					pre[cur.name] = getIdFromURL(cur.url);
					return pre;
				},
				{}
			);
	}

	return (
		<html lang={locale} dir={dir(locale)}>
			<body className={zen_maru_gothic.className}>
				<AOSInitializer />
				<TransitionProvider>
					<Loader />
					<AppRouterCacheProvider>
						<TranslationsProvider
							namespaces={i18nNamespaces}
							locale={locale}
							resources={resources}
						>
							<NavBar
								generations={generations}
								types={types}
								namesAndIds={pokemonsNamesAndId}
							/>
							{children}
						</TranslationsProvider>
					</AppRouterCacheProvider>
				</TransitionProvider>
			</body>
		</html>
	);
}